<?xml version="1.0" encoding="UTF-8"?>
<project name="common" basedir=".">

  <property file="build.properties" />

  <property name="lib.dir" location="lib" />
  <property name="bin.dir" location="bin" />
  <property name="src.dir" location="src" />
  <property name="java.src.dir" location="${src.dir}/java" />
  <property name="thrift.src.dir" location="${src.dir}/thrift" />
  <property name="generated.src.dir" location="${src.dir}/generated" />
  <property name="web.src.dir" location="${src.dir}/web" />
  <property name="conf.dir" location="${src.dir}/conf" />
  <property name="src.conf.dir" location="${src.dir}/conf" />

  <property name="test.dir" location="test" />
  <property name="test.conf.dir" location="${test.dir}/conf" />
  <property name="test.data.dir" location="${test.dir}/data" />
  <property name="test.java.dir" location="${test.dir}/java" />

  <property name="build.dir" location="build" />
  <property name="classes.dir" location="${build.dir}/classes" />
  <property name="dist.dir" location="${build.dir}/dist" />
  <property name="junit.report.dir" location="${build.dir}/junit" />
  <property name="checkstyle.report.dir" value="${build.dir}/checkstyle" />
  <property name="findbugs.report.dir" value="${build.dir}/findbugs" />
  <property name="jar.file" value="${ant.project.name}.jar" />

  <property name="test.build.dir" location="${build.dir}/test" />
  <property name="test.classes.dir" location="${test.build.dir}/classes" />
  <!-- override the following if you install ivy/ant elsewhere or your svn auth details are different -->
  
  <!-- override this fileset to include extra files in the jar that gets built by build-jar -->
  <fileset dir="." includes="${jar.file.includes}" id="jar-fileset" />

  <!-- by default we include all jars under lib in this, override to narrow down -->
  <fileset dir="${lib.dir}" id="lib.fileset">
    <include name="*.jar" />
  </fileset>

  <!-- classpath used for compiling -->
  <path id="compile-classpath">
    <fileset refid="lib.fileset" />
    <fileset dir="${lib.dir}">
      <include name="junit.jar" />
    </fileset>
  </path>

  <!-- classpath used for compiling test classes, override this if you need extra entries to compile your tests -->
  <path id="test-compile-classpath">
    <path refid="compile-classpath" />
  </path>

  <!-- base classpath used when running tests -->
  <path id="test-classpath">
    <pathelement location="${test.conf.dir}" />
    <!--  put instrumented classes higher up in classpath so they will be used if available -->
    <pathelement location="${cobertura.classes.dir}" />
    <pathelement location="${classes.dir}" />
    <pathelement location="${test.classes.dir}" />
    <path refid="compile-classpath" />
  </path>

  <!-- extra classpath that can be used when running tests, override this if you need extra entries to run your tests -->
  <path id="additional-test-classpath" />

  <!-- classpath that can be used to run compiled classes -->
  <path id="run-classpath">
    <path refid="compile-classpath" />
    <pathelement path="${conf.dir}" />
    <pathelement location="${classes.dir}" />
  </path>

  <target name="init" description="Initialise everything needed by other targets">
    <mkdir dir="${build.dir}" />
  </target>

  <target name="init.test" depends="init" description="Create dir for test compilation">
    <mkdir dir="${test.build.dir}" />
  </target>

  <target name="clean" description="Remove files and folders from previous builds">
    <delete dir="${build.dir}" />
    <delete dir="${test.conf.dir}" />
  </target>

  <target name="compile" depends="compile-source" />

  <target name="compile-source" depends="init" description="Compile the Java source code">
    <mkdir dir="${classes.dir}" />
    <javac srcdir="${java.src.dir}" destdir="${classes.dir}" debug="true" fork="true">
      <classpath refid="compile-classpath" />
    </javac>
    <echo message="Sources compiled" />
  </target>

  <target name="compile-test" depends="init.test" description="Compilet the test code">
    <mkdir dir="${test.classes.dir}" />
    <javac srcdir="${test.java.dir}" destdir="${test.classes.dir}" debug="true" fork="true">
      <classpath refid="test-compile-classpath" />
    </javac>
  </target>

  <target name="run-test" depends="compile-test" description="Run the test code" >
    <java classname="com.dappervision.hbase.mapred.test.TablePreparation" fork="true">
      <classpath refid="test-classpath" />
    </java>
  </target>

<!--  we assume jar is the default build target, override this if not the case -->
<target name="build" depends="build-jar" description="Builds this project" />

<target name="build-jar" depends="compile-source" description="Builds this project's jar file(s)">

  <!-- these can be overridden in child build files if you need to customise what goes into your jar -->
  <property name="jar.classes.include" value="**/*" />
  <property name="dist.jar.filename" value="${jar.file}"/>

  <mkdir dir="${dist.dir}" />
  <tstamp>
    <format property="BUILD-DATETIME" pattern="yyyy-MM-dd HH:mm:ss" />
  </tstamp>
  <jar destfile="${dist.dir}/${dist.jar.filename}" update="true">
    <fileset dir="${classes.dir}" excludes="${jar.classes.exclude}" includes="${jar.classes.include}" />
    <!-- set this in child files to add extra stuff to jar -->
    <fileset refid="jar-fileset" />
    <manifest>
      <attribute name="Build-Version" value="${version}" />
      <attribute name="Build-DateTime" value="${BUILD-DATETIME}" />
    </manifest>
  </jar>
  <echo message="Build-Version set to ${version}" />
  <echo message="Build-DateTime set to ${BUILD-DATETIME}" />
</target>

<target name="dist" depends="build" />

<target name="all" depends="build" />

</project>
